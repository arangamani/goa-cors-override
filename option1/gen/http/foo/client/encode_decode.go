// Code generated by goa v3.4.0, DO NOT EDIT.
//
// foo HTTP client encoders and decoders
//
// Command:
// $ goa gen experiments/goa-cors-override/option1/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildFoo1Request instantiates a HTTP request object with method and path set
// to call the "foo" service "foo1" endpoint
func (c *Client) BuildFoo1Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Foo1FooPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("foo", "foo1", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFoo1Request returns an encoder for requests sent to the foo foo1
// server.
func EncodeFoo1Request(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(int)
		if !ok {
			return goahttp.ErrInvalidType("foo", "foo1", "int", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("foo", "foo1", err)
		}
		return nil
	}
}

// DecodeFoo1Response returns a decoder for responses returned by the foo foo1
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeFoo1Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("foo", "foo1", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("foo", "foo1", resp.StatusCode, string(body))
		}
	}
}

// BuildFoo2Request instantiates a HTTP request object with method and path set
// to call the "foo" service "foo2" endpoint
func (c *Client) BuildFoo2Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Foo2FooPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("foo", "foo2", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFoo2Request returns an encoder for requests sent to the foo foo2
// server.
func EncodeFoo2Request(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(int)
		if !ok {
			return goahttp.ErrInvalidType("foo", "foo2", "int", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("foo", "foo2", err)
		}
		return nil
	}
}

// DecodeFoo2Response returns a decoder for responses returned by the foo foo2
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeFoo2Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("foo", "foo2", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("foo", "foo2", resp.StatusCode, string(body))
		}
	}
}

// BuildFoo3Request instantiates a HTTP request object with method and path set
// to call the "foo" service "foo3" endpoint
func (c *Client) BuildFoo3Request(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Foo3FooPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("foo", "foo3", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFoo3Request returns an encoder for requests sent to the foo foo3
// server.
func EncodeFoo3Request(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(int)
		if !ok {
			return goahttp.ErrInvalidType("foo", "foo3", "int", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("foo", "foo3", err)
		}
		return nil
	}
}

// DecodeFoo3Response returns a decoder for responses returned by the foo foo3
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeFoo3Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("foo", "foo3", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("foo", "foo3", resp.StatusCode, string(body))
		}
	}
}

// BuildFooOptionsRequest instantiates a HTTP request object with method and
// path set to call the "foo" service "fooOptions" endpoint
func (c *Client) BuildFooOptionsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FooOptionsFooPath()}
	req, err := http.NewRequest("OPTIONS", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("foo", "fooOptions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFooOptionsResponse returns a decoder for responses returned by the foo
// fooOptions endpoint. restoreBody controls whether the response body should
// be restored after having been read.
func DecodeFooOptionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("foo", "fooOptions", resp.StatusCode, string(body))
		}
	}
}
