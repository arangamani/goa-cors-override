// Code generated by goa v3.4.0, DO NOT EDIT.
//
// foo endpoints
//
// Command:
// $ goa gen experiments/goa-cors-override/option1/design

package foo

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "foo" service endpoints.
type Endpoints struct {
	Foo1       goa.Endpoint
	Foo2       goa.Endpoint
	Foo3       goa.Endpoint
	FooOptions goa.Endpoint
}

// NewEndpoints wraps the methods of the "foo" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Foo1:       NewFoo1Endpoint(s),
		Foo2:       NewFoo2Endpoint(s),
		Foo3:       NewFoo3Endpoint(s),
		FooOptions: NewFooOptionsEndpoint(s),
	}
}

// Use applies the given middleware to all the "foo" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Foo1 = m(e.Foo1)
	e.Foo2 = m(e.Foo2)
	e.Foo3 = m(e.Foo3)
	e.FooOptions = m(e.FooOptions)
}

// NewFoo1Endpoint returns an endpoint function that calls the method "foo1" of
// service "foo".
func NewFoo1Endpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(int)
		return s.Foo1(ctx, p)
	}
}

// NewFoo2Endpoint returns an endpoint function that calls the method "foo2" of
// service "foo".
func NewFoo2Endpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(int)
		return s.Foo2(ctx, p)
	}
}

// NewFoo3Endpoint returns an endpoint function that calls the method "foo3" of
// service "foo".
func NewFoo3Endpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(int)
		return s.Foo3(ctx, p)
	}
}

// NewFooOptionsEndpoint returns an endpoint function that calls the method
// "fooOptions" of service "foo".
func NewFooOptionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.FooOptions(ctx)
	}
}
