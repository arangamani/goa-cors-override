// Code generated by goa v3.4.0, DO NOT EDIT.
//
// foo HTTP server
//
// Command:
// $ goa gen experiments/goa-cors-override/design

package server

import (
	"context"
	foo "experiments/goa-cors-override/gen/foo"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the foo service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	Foo1       http.Handler
	Foo2       http.Handler
	Foo3       http.Handler
	FooOptions http.Handler
	CORS       http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the foo service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *foo.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Foo1", "POST", "/foo1"},
			{"Foo2", "POST", "/foo2"},
			{"Foo3", "POST", "/foo3"},
			{"FooOptions", "OPTIONS", "/foo1"},
			{"CORS", "OPTIONS", "/foo1"},
			{"CORS", "OPTIONS", "/foo2"},
			{"CORS", "OPTIONS", "/foo3"},
		},
		Foo1:       NewFoo1Handler(e.Foo1, mux, decoder, encoder, errhandler, formatter),
		Foo2:       NewFoo2Handler(e.Foo2, mux, decoder, encoder, errhandler, formatter),
		Foo3:       NewFoo3Handler(e.Foo3, mux, decoder, encoder, errhandler, formatter),
		FooOptions: NewFooOptionsHandler(e.FooOptions, mux, decoder, encoder, errhandler, formatter),
		CORS:       NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "foo" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Foo1 = m(s.Foo1)
	s.Foo2 = m(s.Foo2)
	s.Foo3 = m(s.Foo3)
	s.FooOptions = m(s.FooOptions)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the foo endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountFoo1Handler(mux, h.Foo1)
	MountFoo2Handler(mux, h.Foo2)
	MountFoo3Handler(mux, h.Foo3)
	MountFooOptionsHandler(mux, h.FooOptions)
	MountCORSHandler(mux, h.CORS)
}

// MountFoo1Handler configures the mux to serve the "foo" service "foo1"
// endpoint.
func MountFoo1Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFooOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/foo1", f)
}

// NewFoo1Handler creates a HTTP handler which loads the HTTP request and calls
// the "foo" service "foo1" endpoint.
func NewFoo1Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFoo1Request(mux, decoder)
		encodeResponse = EncodeFoo1Response(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "foo1")
		ctx = context.WithValue(ctx, goa.ServiceKey, "foo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFoo2Handler configures the mux to serve the "foo" service "foo2"
// endpoint.
func MountFoo2Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFooOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/foo2", f)
}

// NewFoo2Handler creates a HTTP handler which loads the HTTP request and calls
// the "foo" service "foo2" endpoint.
func NewFoo2Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFoo2Request(mux, decoder)
		encodeResponse = EncodeFoo2Response(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "foo2")
		ctx = context.WithValue(ctx, goa.ServiceKey, "foo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFoo3Handler configures the mux to serve the "foo" service "foo3"
// endpoint.
func MountFoo3Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFooOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/foo3", f)
}

// NewFoo3Handler creates a HTTP handler which loads the HTTP request and calls
// the "foo" service "foo3" endpoint.
func NewFoo3Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFoo3Request(mux, decoder)
		encodeResponse = EncodeFoo3Response(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "foo3")
		ctx = context.WithValue(ctx, goa.ServiceKey, "foo")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFooOptionsHandler configures the mux to serve the "foo" service
// "fooOptions" endpoint.
func MountFooOptionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFooOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/foo1", f)
}

// NewFooOptionsHandler creates a HTTP handler which loads the HTTP request and
// calls the "foo" service "fooOptions" endpoint.
func NewFooOptionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeFooOptionsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "fooOptions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "foo")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service foo.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleFooOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/foo1", f)
	mux.Handle("OPTIONS", "/foo2", f)
	mux.Handle("OPTIONS", "/foo3", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleFooOrigin applies the CORS response headers corresponding to the
// origin for the service foo.
func HandleFooOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*.example.com") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Headers", "X-Api-Version, X-Shared-Secret")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
