// Code generated by goa v3.4.0, DO NOT EDIT.
//
// foo client HTTP transport
//
// Command:
// $ goa gen experiments/goa-cors-override/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the foo service endpoint HTTP clients.
type Client struct {
	// Foo1 Doer is the HTTP client used to make requests to the foo1 endpoint.
	Foo1Doer goahttp.Doer

	// Foo2 Doer is the HTTP client used to make requests to the foo2 endpoint.
	Foo2Doer goahttp.Doer

	// Foo3 Doer is the HTTP client used to make requests to the foo3 endpoint.
	Foo3Doer goahttp.Doer

	// FooOptions Doer is the HTTP client used to make requests to the fooOptions
	// endpoint.
	FooOptionsDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the foo service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		Foo1Doer:            doer,
		Foo2Doer:            doer,
		Foo3Doer:            doer,
		FooOptionsDoer:      doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Foo1 returns an endpoint that makes HTTP requests to the foo service foo1
// server.
func (c *Client) Foo1() goa.Endpoint {
	var (
		encodeRequest  = EncodeFoo1Request(c.encoder)
		decodeResponse = DecodeFoo1Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFoo1Request(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Foo1Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("foo", "foo1", err)
		}
		return decodeResponse(resp)
	}
}

// Foo2 returns an endpoint that makes HTTP requests to the foo service foo2
// server.
func (c *Client) Foo2() goa.Endpoint {
	var (
		encodeRequest  = EncodeFoo2Request(c.encoder)
		decodeResponse = DecodeFoo2Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFoo2Request(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Foo2Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("foo", "foo2", err)
		}
		return decodeResponse(resp)
	}
}

// Foo3 returns an endpoint that makes HTTP requests to the foo service foo3
// server.
func (c *Client) Foo3() goa.Endpoint {
	var (
		encodeRequest  = EncodeFoo3Request(c.encoder)
		decodeResponse = DecodeFoo3Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFoo3Request(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Foo3Doer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("foo", "foo3", err)
		}
		return decodeResponse(resp)
	}
}

// FooOptions returns an endpoint that makes HTTP requests to the foo service
// fooOptions server.
func (c *Client) FooOptions() goa.Endpoint {
	var (
		decodeResponse = DecodeFooOptionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFooOptionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FooOptionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("foo", "fooOptions", err)
		}
		return decodeResponse(resp)
	}
}
