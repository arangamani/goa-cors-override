// Code generated by goa v3.4.0, DO NOT EDIT.
//
// foo HTTP client CLI support package
//
// Command:
// $ goa gen experiments/goa-cors-override/design

package cli

import (
	fooc "experiments/goa-cors-override/gen/http/foo/client"
	"flag"
	"fmt"
	"net/http"
	"os"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `foo (foo1|foo2|foo3|foo-options)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` foo foo1 --p 6458532619907689287` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		fooFlags = flag.NewFlagSet("foo", flag.ContinueOnError)

		fooFoo1Flags = flag.NewFlagSet("foo1", flag.ExitOnError)
		fooFoo1PFlag = fooFoo1Flags.String("p", "REQUIRED", "int is the payload type of the foo service foo1 method.")

		fooFoo2Flags = flag.NewFlagSet("foo2", flag.ExitOnError)
		fooFoo2PFlag = fooFoo2Flags.String("p", "REQUIRED", "int is the payload type of the foo service foo2 method.")

		fooFoo3Flags = flag.NewFlagSet("foo3", flag.ExitOnError)
		fooFoo3PFlag = fooFoo3Flags.String("p", "REQUIRED", "int is the payload type of the foo service foo3 method.")

		fooFooOptionsFlags = flag.NewFlagSet("foo-options", flag.ExitOnError)
	)
	fooFlags.Usage = fooUsage
	fooFoo1Flags.Usage = fooFoo1Usage
	fooFoo2Flags.Usage = fooFoo2Usage
	fooFoo3Flags.Usage = fooFoo3Usage
	fooFooOptionsFlags.Usage = fooFooOptionsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "foo":
			svcf = fooFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "foo":
			switch epn {
			case "foo1":
				epf = fooFoo1Flags

			case "foo2":
				epf = fooFoo2Flags

			case "foo3":
				epf = fooFoo3Flags

			case "foo-options":
				epf = fooFooOptionsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "foo":
			c := fooc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "foo1":
				endpoint = c.Foo1()
				var err error
				var v int64
				v, err = strconv.ParseInt(*fooFoo1PFlag, 10, 64)
				data = int(v)
				if err != nil {
					return nil, nil, fmt.Errorf("invalid value for fooFoo1PFlag, must be INT")
				}
			case "foo2":
				endpoint = c.Foo2()
				var err error
				var v int64
				v, err = strconv.ParseInt(*fooFoo2PFlag, 10, 64)
				data = int(v)
				if err != nil {
					return nil, nil, fmt.Errorf("invalid value for fooFoo2PFlag, must be INT")
				}
			case "foo3":
				endpoint = c.Foo3()
				var err error
				var v int64
				v, err = strconv.ParseInt(*fooFoo3PFlag, 10, 64)
				data = int(v)
				if err != nil {
					return nil, nil, fmt.Errorf("invalid value for fooFoo3PFlag, must be INT")
				}
			case "foo-options":
				endpoint = c.FooOptions()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// fooUsage displays the usage of the foo command and its subcommands.
func fooUsage() {
	fmt.Fprintf(os.Stderr, `Service is the foo service interface.
Usage:
    %s [globalflags] foo COMMAND [flags]

COMMAND:
    foo1: Foo1 implements foo1.
    foo2: Foo2 implements foo2.
    foo3: Foo3 implements foo3.
    foo-options: FooOptions implements fooOptions.

Additional help:
    %s foo COMMAND --help
`, os.Args[0], os.Args[0])
}
func fooFoo1Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] foo foo1 -p INT

Foo1 implements foo1.
    -p INT: int is the payload type of the foo service foo1 method.

Example:
    `+os.Args[0]+` foo foo1 --p 6458532619907689287
`, os.Args[0])
}

func fooFoo2Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] foo foo2 -p INT

Foo2 implements foo2.
    -p INT: int is the payload type of the foo service foo2 method.

Example:
    `+os.Args[0]+` foo foo2 --p 5808192697067605655
`, os.Args[0])
}

func fooFoo3Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] foo foo3 -p INT

Foo3 implements foo3.
    -p INT: int is the payload type of the foo service foo3 method.

Example:
    `+os.Args[0]+` foo foo3 --p 4329599388023707663
`, os.Args[0])
}

func fooFooOptionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] foo foo-options

FooOptions implements fooOptions.

Example:
    `+os.Args[0]+` foo foo-options
`, os.Args[0])
}
